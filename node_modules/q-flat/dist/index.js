"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a = Object.prototype, toString = _a.toString, hasOwnProperty = _a.hasOwnProperty;
var OBJECT_TYPE = "[object Object]";
var ARRAY_TYPE = "[object Array]";
/**
 * @description
 * Creates a querystring style object from a nested one.
 *
 * @example
 * var result = flatten({ a: { b: 1 }, c: { d: 1 } });
 * result; //-> { "a[b]": 1, "c[d]": 2 }
 *
 * @param obj The object to flatten.
 */
function flatten(obj, path, result) {
    var type = toString.call(obj);
    if (result === undefined) {
        if (type === OBJECT_TYPE) {
            result = {};
        }
        else if (type === ARRAY_TYPE) {
            result = [];
        }
        else {
            return;
        }
    }
    for (var key in obj) {
        /* istanbul ignore if */
        if (!hasOwnProperty.call(obj, key)) {
            continue;
        }
        var val = obj[key];
        if (val == null) {
            continue;
        }
        switch (toString.call(val)) {
            case ARRAY_TYPE:
            case OBJECT_TYPE:
                flatten(val, join(path, key), result);
                break;
            default:
                result[join(path, key)] = val;
                break;
        }
    }
    return result;
}
exports.flatten = flatten;
/**
 * Join path keys using query string `a[b]` style syntax.
 */
function join(path, key) {
    return path != null ? path + "[" + key + "]" : key;
}
//# sourceMappingURL=index.js.map