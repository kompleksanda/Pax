/// <reference types="node" />
import { Http2ServerResponse } from "http2";
import { Profile, Credentials, CredentialStorage } from "./oauth";
import { ApiConfiguration } from "./ApiConfiguration";
import { AnyJson, InvokeBody, AnyPromise } from "./commands/Invoke";
/**
 * Interface responsable for exposing Paxful API integration.
 * @public
 */
export declare class PaxfulApi {
    private readonly apiConfiguration;
    private readonly credentialStorage;
    constructor(configuration: ApiConfiguration, credentialStorage?: CredentialStorage);
    /**
     * Redirect the user to authorize the access.
     * @param response
     */
    login(response: Http2ServerResponse): void;
    /**
     * Retrieve the tokens with the code generated by {@link PaxfulApi/login}
     * @param code returned by the redirect after user authorizes the application.
     * @return a promise for {@link Credentials}
     */
    impersonatedCredentials(code: string): Promise<Credentials>;
    /**
     * Force credentials refresh
     * @return a promise for {@link Credentials}
     */
    refreshCredentials(): Promise<Credentials>;
    /**
     * Retrieve the tokens for using your own account.
     */
    myCredentials(): Promise<Credentials>;
    /**
     * Get current logged user profile.
     */
    getProfile(): Promise<Profile>;
    /**
     * Invokes an API operation on behalf of currently authenticated user. Designed for working with Paxful API.
     *
     * @param url - Url that should be called at api.paxful.com
     * @param payload - (Optional) Payload of the request
     */
    invoke(url: string, payload?: InvokeBody): AnyPromise;
    /**
     * Uploads files on behalf of currently authenticated user,
     * assumes that payload contains multipart form data.
     *
     * @param url - Url that should be called at api.paxful.com
     * @param payload - (Optional) Payload of the request
     * @param method - (Optional) Method to use. Default: POST
     */
    upload(url: string, payload: InvokeBody, method?: string): AnyPromise;
    /**
     * Downloads file on behalf of currently authenticated user,
     * assumes that response will be binary file.
     *
     * @param url - Url that should be called at api.paxful.com
     * @param payload - (Optional) arguments. Passed as url params in case of GET, or as FormData in case of other methods.
     * @param method - (Optional) Method to use. Default: GET
     */
    download(url: string, payload?: InvokeBody, method?: string): AnyPromise;
    /**
     * Invokes a GET API operation on behalf of currently authenticated user.
     * Will parse response as json.
     *
     * @param url - Url that should be called at api.paxful.com
     * @param params - (Optional) url parameters to send
     */
    get(url: string, params?: InvokeBody): AnyPromise;
    /**
     * Invokes a POST API operation on behalf of currently authenticated user.
     * Will parse response as json.
     *
     * @param url - Url that should be called at api.paxful.com
     * @param json - (Optional) any json data
     */
    post(url: string, json?: AnyJson): AnyPromise;
    /**
     * Invokes a DELETE API operation on behalf of currently authenticated user.
     * Will parse response as json.
     *
     * @param url - Url that should be called at api.paxful.com
     * @param json - (Optional) any json data
     */
    delete(url: string, json?: AnyJson): AnyPromise;
    /**
     * Invokes a PUT API operation on behalf of currently authenticated user.
     * Will parse response as json.
     *
     * @param url - Url that should be called at api.paxful.com
     * @param json - (Optional) any json data
     */
    put(url: string, json?: AnyJson): AnyPromise;
    /**
     * Invokes a PATCH API operation on behalf of currently authenticated user.
     * Will parse response as json.
     *
     * @param url - Url that should be called at api.paxful.com
     * @param json - (Optional) any json data
     */
    patch(url: string, json?: AnyJson): AnyPromise;
    protected invokeJsonMethod(url: string, method: string, json?: AnyJson): AnyPromise;
    private validateAndSetDefaultParameters;
    private saveToken;
}
