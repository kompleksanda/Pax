"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = __importStar(require("node-fetch"));
var RefreshIfNeeded_1 = __importDefault(require("./RefreshIfNeeded"));
var createRequest = function (credentials, config) {
    return new node_fetch_1.Request({
        href: process.env.PAXFUL_OAUTH_HOST + "/oauth2/userinfo"
    }, {
        method: "GET",
        headers: {
            "Accepts": "application/json",
            "Authorization": "Bearer " + credentials.accessToken
        },
        agent: config.proxyAgent
    });
};
/**
 * Retrieves personal access token and refresh token.
 *
 * @param credentialStorage
 * @param config
 */
function retrieveProfile(credentialStorage, config) {
    var token = credentialStorage.getCredentials();
    if (!token)
        throw Error("Token not provided, please review if token was generated!");
    var request = createRequest(token, config);
    return node_fetch_1.default(request)
        .then(function (response) { return RefreshIfNeeded_1.default(request, response, config, credentialStorage); })
        .then(function (response) { return response.json(); });
}
exports.default = retrieveProfile;
//# sourceMappingURL=GetProfile.js.map